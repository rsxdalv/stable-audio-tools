name: Release and Build wheel

on:
  workflow_dispatch:
  push:
    branches:
      - "main"

jobs:
  release-and-build:
    name: Create Release and Build Wheel
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true

      # Retrieve version
      - name: Retrieve version
        id: version
        run: |
          version=$(grep -oP "(?<=version=['\"])[^'\"]+(?=['\"])" setup.py)
          if [ -z "$version" ]; then
            echo "Version not found. Check setup.py format." >&2
            exit 1
          fi
          echo "TAG_NAME=v$version" >> $GITHUB_ENV
          echo "Extracted version: v$version"

      # Generate Changelog
      - name: Changelog
        uses: scottbrenner/generate-changelog-action@master
        id: changelog

      # Create Release
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # Install dependencies
      - name: Install Deps
        run: python -m pip install . torch==2.3.1 wheel ninja build

      # Build the wheel
      - name: Build the wheel
        run: python -m build --wheel --outdir dist/

      # Log wheel size
      - run: du -h dist/*

      # Upload built wheels as artifact
      - uses: actions/upload-artifact@v4
        with:
          path: dist/*.whl

      # Log built wheel names
      - name: Log Built Wheels
        run: |
          ls dist

      # Set wheel name
      - name: Set wheel name
        run: echo "wheel_name=$(basename dist/*.whl)" >> $GITHUB_ENV

      # Get Release with tag
      - name: Get Release with tag
        id: get_current_release
        uses: joutvhu/get-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload wheel as Release asset
      - name: Upload Release Asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_current_release.outputs.upload_url }}
          asset_path: ./dist/${{ env.wheel_name }}
          asset_name: ${{ env.wheel_name }}
          asset_content_type: application/*